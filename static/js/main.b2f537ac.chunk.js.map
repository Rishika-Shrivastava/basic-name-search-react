{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","alt","src","monster","id","name","email","CardList","console","log","monsters","map","SearchBox","placeholder","handleChange","type","onChange","App","e","setState","searchField","target","value","state","fetch","then","response","json","users","this","filteredMonsters","filter","toLowerCase","includes","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mUAGaA,EAAO,SAACC,GAAD,OAChB,sBAAKC,UAAU,iBAAf,UACI,qBAAKC,IAAK,UAAUC,IAAG,+BAA4BH,EAAMI,QAAQC,GAA1C,4BACvB,mCAAOL,EAAMI,QAAQE,KAArB,OACA,4BAAIN,EAAMI,QAAQG,YCHbC,EAAW,SAAAR,GAGpB,OAFAS,QAAQC,IAAIV,GAEJ,qBAAKC,UAAW,YAAhB,SACFD,EAAMW,SAASC,KAAI,SAAAR,GAAO,OAC1B,cAAC,EAAD,CAA0BA,QAAWA,GAAxBA,EAAQC,UCJlBQ,G,MAAY,SAAC,GAAD,IAAEC,EAAF,EAAEA,YAAaC,EAAf,EAAeA,aAAf,OAErB,uBAAQd,UAAY,SACZe,KAAO,SACPF,YAAeA,EACfG,SAAYF,MCkDTG,G,wDApDb,aAAe,IAAD,8BAEZ,gBAmBFH,aAAe,SAACI,GACZ,EAAKC,SAAS,CAACC,YAAaF,EAAEG,OAAOC,SAlBvC,EAAKC,MAAQ,CACTb,SAAU,GACVU,YAAa,IANL,E,qDAcd,WAAqB,IAAD,OAClBI,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKT,SAAS,CAAET,SAAUkB,S,oBAS3C,WAAU,IAAD,EAE0BC,KAAKN,MAA/Bb,EAFA,EAEAA,SAAWU,EAFX,EAEWA,YACZU,EAAmBpB,EAASqB,QAAO,SAAA5B,GAAO,OAC5CA,EAAQE,KAAK2B,cAAcC,SAASb,EAAYY,kBAGpD,OACE,sBAAKhC,UAAU,MAAf,UAEE,oDAEA,cAAC,EAAD,CACEa,YAAc,kBACdC,aAAgBe,KAAKf,eAGvB,cAAC,EAAD,CAAUJ,SAAYoB,W,GA5CZI,cCKHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBZ,MAAK,YAAkD,IAA/Ca,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.b2f537ac.chunk.js","sourcesContent":["import React from 'react';\r\nimport '../card/card.styles.css'\r\n\r\nexport const Card = (props) => (\r\n    <div className='card-container'>\r\n        <img alt =\"monster\" src = {`https://robohash.org/${props.monster.id}?set=set2&size=180x180`}></img>\r\n        <h2> { props.monster.name} </h2>\r\n        <p>{props.monster.email }</p>\r\n    </div>\r\n)","import React from 'react';\r\nimport './card-list.styles.css';\r\nimport {Card} from '../card/card.component'\r\n\r\nexport const CardList = props => {\r\n    console.log(props);\r\n    \r\n    return (<div className= 'card-list'>\r\n        { props.monsters.map(monster => (\r\n          <Card key = {monster.id}  monster = {monster} />)) } \r\n        </div>);\r\n};","import React from 'react';\r\n\r\nimport './search-box.styles.css';\r\n\r\n\r\nexport const SearchBox = ({placeholder, handleChange}) => (\r\n\r\n    <input  className = 'search' \r\n            type = 'search' \r\n            placeholder = {placeholder}\r\n            onChange = {handleChange} // ,() => console.log(this.state))\r\n    />\r\n\r\n);","import React, { Component } from 'react';\n//import logo from './logo.svg';\nimport { CardList } from './components/card-list/card-list.component';\nimport { SearchBox } from './components/search-box/search-box.component';\n\nimport './App.css';\n\nclass App extends Component {\n  constructor() {\n\n    super();\n\n    this.state = {\n        monsters: [],\n        searchField: ''\n    };\n\n    //used when we don't use arrow functions. arrow functions will automatically bind\n   //this.handleChange = this.handleChange.bind(this);\n\n  }\n\n  componentDidMount() {\n    fetch('https://jsonplaceholder.typicode.com/users')\n    .then(response => response.json())\n    .then(users => this.setState({ monsters: users }))\n  }\n\n\n  handleChange = (e) => {\n      this.setState({searchField: e.target.value})\n  };\n\n\n  render() {\n\n    const {monsters , searchField} = this.state;\n    const filteredMonsters = monsters.filter(monster => \n        monster.name.toLowerCase().includes(searchField.toLowerCase())\n      );\n\n    return (\n      <div className=\"App\">\n\n        <h1> Monsters-Rolodex </h1>\n        \n        <SearchBox \n          placeholder = 'search monsters'\n          handleChange = {this.handleChange}\n        />\n        \n        <CardList monsters = {filteredMonsters}/>                   \n      </div>\n    );\n  }\n\n\n}\n\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}